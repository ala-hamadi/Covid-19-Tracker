{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","components/CountryPicker/Country.module.css","components/Cards/Cards.module.css","components/Chart/Chart.module.css","images/image.png"],"names":["Cards","data","lighMode","dateBuilder","d","nd","Date","day","getDay","date","getDate","month","getMonth","year","getFullYear","confirmed","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","darkMode","CardContent","cardcontent","Typography","color","gutterBottom","titleDarkInfected","variant","start","end","value","duration","separator","dateDark","lastUpdate","recovered","titleDarkiRecovered","deaths","titleDarkDeaths","url","fetchData","country","a","changeURL","axios","get","response","modifiedData","console","log","fetchDailyData","map","dailyData","total","reportDate","fetchCountries","countries","name","Chart","useState","SetDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","InputLabel","id","Select","labelId","inputProps","onChange","e","target","menuItem","MenuItem","key","App","state","toogle","fetchCountry","setState","handleToogle","fetchedData","this","size","fixed","onClick","image","alt","src","coronaImage","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.38e2de49.chunk.js","sourcesContent":["import React from 'react'\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\n//MUI imports\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core'\r\n\r\nconst Cards = ({data,lighMode}) =>{\r\n    \r\n    const dateBuilder=(d)=>{\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        let nd=new Date(d)\r\n        let day=days[nd.getDay()]  \r\n        let date =nd.getDate()\r\n        let month=months[nd.getMonth()]\r\n        let year= nd.getFullYear()\r\n        return `${day} ${date} ${month} ${year}`\r\n    }\r\n\r\n    if(!data.confirmed){\r\n        return \"loading\"   \r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                \r\n                <Grid item component={Card}  xs={12} md={3} className={lighMode ? cx(styles.card, styles.infected) :cx(styles.card, styles.infected, styles.darkMode)}>\r\n                    <CardContent className={styles.cardcontent}>\r\n                        <Typography color=\"textSecondary\" gutterBottom className={!lighMode && styles.titleDarkInfected}>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={data.confirmed.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                         <Typography color=\"textSecondary\" className={!lighMode && styles.dateDark}>{dateBuilder(data.lastUpdate)}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                \r\n                <Grid item component={Card}  xs={12} md={3} className={lighMode ? cx(styles.card, styles.recovered) :cx(styles.card, styles.recovered, styles.darkMode)}>\r\n                    <CardContent className={styles.cardcontent}>\r\n                        <Typography color=\"textSecondary\" gutterBottom className={!lighMode && styles.titleDarkiRecovered}>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                            start={0}\r\n                            end={data.recovered.value}\r\n                            duration={2.5}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" className={!lighMode && styles.dateDark}>{dateBuilder(data.lastUpdate)}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card}  xs={12} md={3} className={lighMode ? cx(styles.card, styles.deaths) :cx(styles.card, styles.deaths, styles.darkMode)}>\r\n                    <CardContent className={styles.cardcontent}>\r\n                        <Typography color=\"textSecondary\" gutterBottom className={!lighMode && styles.titleDarkDeaths}>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                            start={0}\r\n                            end={data.deaths.value}\r\n                            duration={2.5}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" className={!lighMode && styles.dateDark}>{dateBuilder(data.lastUpdate)}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>   \r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Cards","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\n export const fetchData = async (country) =>{\r\n    let changeURL=url\r\n    if (country && country!==\"Global\"){\r\n        changeURL=`${url}/countries/${country}`\r\n    }\r\n    try {\r\n        const response =await axios.get(changeURL)\r\n        const data=response.data\r\n        const modifiedData ={\r\n            confirmed:data.confirmed,\r\n            recovered:data.recovered,\r\n            deaths:data.deaths,\r\n            lastUpdate:data.lastUpdate\r\n        }\r\n        return modifiedData\r\n    } catch (error) { \r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () =>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`)\r\n        const modifiedData= data.map(dailyData=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate\r\n        }))\r\n        return modifiedData\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries =async () =>{\r\n    try {\r\n        const {data:{countries}} =await axios.get(`${url}/countries`)\r\n        return countries.map((country)=>country.name)\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React, {useState,useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api'\r\nimport {Line , Bar } from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\nconst Chart = ({data,country}) =>{\r\n    const [dailyData,SetDailyData]=useState([])\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI =async () =>{\r\n            SetDailyData(await fetchDailyData())\r\n        }\r\n        fetchAPI()\r\n    },[dailyData])\r\n\r\n\r\n    const lineChart =(\r\n        dailyData.length ?\r\n        (<Line \r\n            data={{\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\n                    data:dailyData.map(({confirmed})=>confirmed),\r\n                    label:\"Infected\",\r\n                    borderColor:'blue',\r\n                    backgroundColor:'rgb(0,0,255)',\r\n                    fill:false\r\n                },{\r\n                    data:dailyData.map(({deaths})=>deaths),\r\n                    label:\"deaths\",\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgb(255,0,0)',\r\n                    fill:false\r\n                }]\r\n            }}\r\n        />):\r\n        null\r\n    )\r\n    const barChart=(\r\n        data.confirmed ?\r\n        (\r\n            <Bar\r\n                data={{\r\n                    labels:['Infected','Recovered','Deaths'],\r\n                    datasets:[{\r\n                        label:'People',\r\n                        backgroundColor:[\r\n                            'rgba(0,0,255,0.5)',\r\n                            'rgba(0,255,0,0.5)',\r\n                            'rgba(255,0,0,0.5)'\r\n                        ],\r\n                        data:[data.confirmed.value,data.recovered.value,data.deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend:{display:false},\r\n                    title:{display:true, text:`Current state in ${country}`},\r\n                }}\r\n            />\r\n        ):null\r\n    )\r\n    \r\n    return(\r\n        <div className={styles.container}>\r\n            {country && country!==\"Global\" ? barChart : lineChart}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Chart","import React,{useState,useEffect} from 'react'\r\nimport styles from './Country.module.css'\r\nimport {fetchCountries} from '../../api'\r\n\r\n//MUI imports\r\nimport {FormControl} from '@material-ui/core'\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange,lighMode}) =>{\r\n\r\n    const [fetchedCountries,setFetchedCountries]=useState([])\r\n    useEffect(()=>{\r\n        const fetchAPI=async()=>{\r\n            setFetchedCountries(await fetchCountries())  \r\n        }\r\n        fetchAPI()\r\n        \r\n    },[setFetchedCountries])\r\n    return(\r\n        \r\n        <FormControl className={styles.formControl}>\r\n            <InputLabel id=\"demo-simple-select-outlined-label\" className={!lighMode && styles.label}>Choose Country</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-outlined-label\"\r\n                    id=\"demo-simple-select-outlined\"\r\n                    label=\"Choose Country\"\r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                    onChange={(e)=>handleCountryChange(e.target.value)}   \r\n                    className={!lighMode && styles.menuItem}  \r\n                >\r\n                        {fetchedCountries.map((country)=><MenuItem value={country} key={country} >{country}</MenuItem>)}\r\n\r\n                    </Select>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\nexport default CountryPicker","import React,{Component} from 'react'\r\nimport styles from './App.module.css'\r\nimport Cards from './components/Cards/Cards'\r\nimport Chart from './components/Chart/Chart'\r\nimport CountryPicker from './components/CountryPicker/CountryPicker'\r\nimport {fetchData} from './api'\r\nimport coronaImage from './images/image.png'\r\nimport {Sun,Moon} from 'react-feather'\r\nclass App extends Component {\r\n        \r\n        state = {\r\n             data:{},\r\n             country:'',\r\n             toogle:true\r\n        }\r\n    \r\n    \r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData()\r\n        this.setState({\r\n            data:fetchedData\r\n        })\r\n    }\r\n\r\n    handleCountryChange=async (country)=>{\r\n        const fetchCountry = await fetchData(country)\r\n        this.setState({\r\n            data:fetchCountry,\r\n            country:country\r\n        })\r\n    }\r\n\r\n    handleToogle=()=>{\r\n        this.setState({\r\n            toogle:!this.state.toogle\r\n        })\r\n    }\r\n    render() {\r\n        const {data,country,toogle}=this.state \r\n        return (\r\n            <div className={toogle ? styles.lighMode : styles.darkMode}>\r\n                {toogle ? <Sun color={'#ffc107'} size={60} className={styles.fixed} onClick={this.handleToogle}/> : <Moon color={'#A9A9A9'} size={60} className={styles.fixed} onClick={this.handleToogle}/>}\r\n                <div className={styles.container}>\r\n                    <img className={styles.image} alt=\"COVID-19\" src={coronaImage}/>\r\n                    <Cards data={data} lighMode={toogle}/>\r\n                    <CountryPicker handleCountryChange={this.handleCountryChange} lighMode={toogle}/>\r\n                    <Chart data={data} country={country}/>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n export default App\r\n \r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />,document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkMode\":\"App_darkMode__3QTJd\",\"lighMode\":\"App_lighMode__13yNM\",\"container\":\"App_container__RrBqa\",\"image\":\"App_image__1vSrl\",\"fixed\":\"App_fixed__2MXcg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__17vgS\",\"nativeSelect\":\"Country_nativeSelect__2S7Hm\",\"label\":\"Country_label__1qtIU\",\"menuItem\":\"Country_menuItem__3QfHH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__DXIMN\",\"card\":\"Cards_card__QuAKr\",\"darkMode\":\"Cards_darkMode__23007\",\"infected\":\"Cards_infected__2phOE\",\"recovered\":\"Cards_recovered__8RK73\",\"deaths\":\"Cards_deaths__sAoil\",\"titleDarkInfected\":\"Cards_titleDarkInfected__1k6dI\",\"titleDarkiRecovered\":\"Cards_titleDarkiRecovered__2tO2F\",\"titleDarkDeaths\":\"Cards_titleDarkDeaths__3l2vY\",\"dateDark\":\"Cards_dateDark__yBgl3\",\"cardcontent\":\"Cards_cardcontent__1Fd23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__wGutd\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}